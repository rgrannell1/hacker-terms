
"use strict"




var analyseData       = require('hacker-news/stats/analyse-data')
var findTermFrequency = require('hacker-news/stats/find-term-frequency')




var addTimeLabel = (units, freq) => {

	if (units.year) {
		freq.datum.timeLabel = new Date(1000 * freq.datum.time).getFullYear( )
	}

	if (units.month) {
		freq.datum.timeLabel = new Date(1000 * freq.datum.time).getMonth( )
	}

	return freq

}





var groupDataByTime = (acc, freq) => {

	if (acc.length === 0 || acc[acc.length - 1].timeLabel !== freq.datum.timeLabel) {

		return acc.concat({
			termScores:   freq.terms,
			timeLabel:    freq.datum.timeLabel,
			observations: 0
		})

	}

	var end = acc[acc.length - 1]
	++end.observations

	if (end.timeLabel === freq.datum.timeLabel) {

		Object.keys(freq.terms).forEach(term => {
			end.termScores[term] += freq.terms[term]
		})

		return acc

	}

}




var averageUsages = group => {

	var termAverages = { }

	Object.keys(group.termScores).forEach(key => {
		termAverages[key] = group.termScores[key] / group.observations
	})

	return {
		termAverages,
		timeLabel:    group.timeLabel,
		observations: group.observations
	}

}





var usageInRange = (args, freqs) => {

	return freqs
		.map(
			addTimeLabel.bind({ }, {year: args.year, month: args.month}) )
		.reduce(
			groupDataByTime, [ ])
		.map(
			averageUsages)

}





var main = rawArgs => {

	var args = main.validate(main.preprocess(rawArgs))

	if (args.freq) {

		analyseData(args, data => {

			findTermFrequency(args, data, freqs => {

				var usage = usageInRange(args, freqs)
				console.log( usage )

			})

		})

	}

}

main.validate = rawArgs => {
	return rawArgs
}

main.preprocess = rawArgs => {

	return {
		freq:    rawArgs.freq,
		phrases: rawArgs['<phrase>'],
		year:    rawArgs['-y'] || rawArgs['--year'],
		month:   rawArgs['-m'] || rawArgs['--month']
	}

}





module.exports = main
